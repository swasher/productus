package com.swasher.productus.presentation.screens

import android.util.Log
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.gestures.detectTransformGestures
import androidx.compose.foundation.gestures.rememberTransformableState
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll

import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import coil.compose.rememberAsyncImagePainter
import androidx.navigation.NavController

import androidx.compose.material3.*
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Scaffold
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.Text
import androidx.compose.material3.IconButton
import androidx.compose.material3.Button
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Delete
import androidx.compose.ui.Alignment
import androidx.compose.ui.graphics.graphicsLayer
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalConfiguration

import com.swasher.productus.data.model.Photo
import com.swasher.productus.data.repository.PhotoRepository
import com.swasher.productus.presentation.viewmodel.PhotoViewModel


import androidx.lifecycle.viewmodel.compose.viewModel
import com.swasher.productus.data.repository.getThumbnailUrl
import java.net.URLEncoder
import java.nio.charset.StandardCharsets

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PhotoDetailScreen(navController: NavController, folderName: String, photo: Photo, viewModel: PhotoViewModel = viewModel()) {

    var comment by remember { mutableStateOf(photo.comment) }
    var tags by remember { mutableStateOf(photo.tags.joinToString(", ")) }
    var name by remember { mutableStateOf(photo.name) }
    var country by remember { mutableStateOf(photo.country) }
    var store by remember { mutableStateOf(photo.store) }
    var price by remember { mutableStateOf(photo.price.toString()) }
    var showDeleteDialog by remember { mutableStateOf(false) } // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è

    val imeInsets = WindowInsets.ime // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    val keyboardPadding = imeInsets.asPaddingValues() // ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ PaddingValues

    val screenWidth = LocalConfiguration.current.screenWidthDp // üìå –ü–æ–ª—É—á–∞–µ–º —à–∏—Ä–∏–Ω—É —ç–∫—Ä–∞–Ω–∞ –≤ dp

    Log.d("PhotoDetailScreen", "photo.imageUrl: ${photo.imageUrl}")

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(name)
                        IconButton(onClick = { showDeleteDialog = true }) { // ‚úÖ –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
                            Icon(Icons.Default.Delete, contentDescription = "–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ")
                        }
                    }
                },
                navigationIcon = {
                    IconButton(onClick = { navController.popBackStack() }) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "–ù–∞–∑–∞–¥")
                    }
                }
            )
        }
    ) { padding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(padding)
                .padding(16.dp)
                .verticalScroll(rememberScrollState())
                .padding(keyboardPadding),
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Image(
                painter = rememberAsyncImagePainter(getThumbnailUrl(photo.imageUrl, screenWidth * 1, 200)),
                contentDescription = "–§–æ—Ç–æ",
                modifier = Modifier
                    .fillMaxWidth()
                    .height(200.dp)
                    .clickable {
                        val encodedUrl = URLEncoder.encode(photo.imageUrl, StandardCharsets.UTF_8.toString())
                        navController.navigate("fullScreenPhoto/$encodedUrl")
                    }
            )

            OutlinedTextField(value = name, onValueChange = { name = it }, label = { Text("–ù–∞–∑–≤–∞–Ω–∏–µ") }, modifier = Modifier.fillMaxWidth())
            OutlinedTextField(value = comment, onValueChange = { comment = it }, label = { Text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:") }, modifier = Modifier.fillMaxWidth())
            OutlinedTextField(value = tags, onValueChange = { tags = it }, label = { Text("–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):") }, modifier = Modifier.fillMaxWidth())
            OutlinedTextField(value = price, onValueChange = { price = it }, label = { Text("–¶–µ–Ω–∞") }, modifier = Modifier.fillMaxWidth())
            OutlinedTextField(value = store, onValueChange = { store = it }, label = { Text("–ú–∞–≥–∞–∑–∏–Ω") }, modifier = Modifier.fillMaxWidth())
            OutlinedTextField(value = country, onValueChange = { country = it }, label = { Text("–°—Ç—Ä–∞–Ω–∞") }, modifier = Modifier.fillMaxWidth())

            Button(
                onClick = {
                    viewModel.updatePhoto(folderName, photo.id, comment,  tags.split(","),  name, country, store, price.toFloat())
                    navController.popBackStack()
                },
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
            }

        }
    }

    // ‚úÖ –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    if (showDeleteDialog) {
        AlertDialog(
            onDismissRequest = { showDeleteDialog = false },
            title = { Text("–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ?") },
            text = { Text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Ñ–æ—Ç–æ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.") },
            confirmButton = {
                Button(
                    onClick = {
                        viewModel.deletePhoto(folderName, photo.id, photo.imageUrl) // ‚úÖ –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ
                        navController.popBackStack("photoList/$folderName", inclusive = false) // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ñ–æ—Ç–æ
                    }
                ) {
                    Text("–£–¥–∞–ª–∏—Ç—å")
                }
            },
            dismissButton = {
                Button(onClick = { showDeleteDialog = false }) {
                    Text("–û—Ç–º–µ–Ω–∞")
                }
            }
        )
    }


}

// deprecated
//@Preview(showBackground = true)
//@Composable
//fun PreviewPhotoDetailScreen() {
//    PhotoDetailScreen(NavController(LocalContext.current), "DefaultFolder", Photo(id = "1", imageUrl = "https://placehold.co/200"))
//}


