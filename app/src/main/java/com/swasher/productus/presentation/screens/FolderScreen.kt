package com.swasher.productus.presentation.screens

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Edit
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.onFocusChanged
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import androidx.navigation.compose.rememberNavController
import com.swasher.productus.presentation.viewmodel.PhotoViewModel


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun FolderScreen(navController: NavController, viewModel: PhotoViewModel = viewModel())  {
    val folders by viewModel.folders.collectAsState()
    var folderToRename by remember { mutableStateOf<String?>(null) } // ‚úÖ –í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    var newFolderName by remember { mutableStateOf("") } // ‚úÖ –ù–æ–≤–æ–µ –∏–º—è –ø–∞–ø–∫–∏
    var showRenameDialog by remember { mutableStateOf(false) } // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    var folderToDelete by remember { mutableStateOf<String?>(null) } // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏
    var showDeleteDialog by remember { mutableStateOf(false) } // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    var showNewFolderDialog by remember { mutableStateOf(false) }    // dialog –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    var searchQuery by remember { mutableStateOf("") } // ‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞

    // üìå –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —ç–∫—Ä–∞–Ω–∞
    LaunchedEffect(Unit) {
        viewModel.loadFolders()
    }

    Scaffold(
        topBar = { TopAppBar(title = { Text("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏") }) },
        floatingActionButton = {
            FloatingActionButton(onClick = { showNewFolderDialog = true }) {
                Icon(Icons.Default.Add, contentDescription = "–î–æ–±–∞–≤–∏—Ç—å –ø–∞–ø–∫—É")
            }
        }
    ) { padding ->


        Column(modifier = Modifier.padding(padding).padding(16.dp)) {
            if (folders.isEmpty()) {
                Text("–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫", modifier = Modifier.padding(16.dp))
            } else {

                /*
                * –ü–û–õ–ï –î–õ–Ø –ü–û–ò–°–ö–ê
                */
                Column {
                    TextField(
                        value = searchQuery,
                        onValueChange = {searchQuery  = it },
                        label = { Text("–ü–æ–∏—Å–∫...") },
                        modifier = Modifier
                            .fillMaxWidth()
                            .onFocusChanged { focusState ->
                                if (focusState.isFocused) {
                                    navController.navigate("searchScreen")
                                }
                            },
//                            .clickable {
//                                navController.navigate("searchScreen")
//                            },
                        enabled = true // –î–µ–ª–∞–µ–º –ø–æ–ª–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è –≤–≤–æ–¥–∞ (–µ—Å–ª–∏ clickable –≤–∞—Ä–∏–∞–Ω—Ç)
                )}

                LazyColumn(verticalArrangement = Arrangement.spacedBy(8.dp)) {
                    items(folders) { folder ->
                        Card(
                            modifier = Modifier
                                .fillMaxWidth()
                                .clickable { navController.navigate("photoList/$folder") }
                                .padding(8.dp), // –û—Ç—Å—Ç—É–ø—ã –≤–æ–∫—Ä—É–≥ –∫–∞—Ä—Ç–æ—á–∫–∏
                            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp) // –¢–µ–Ω—å –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
                        ) {
                            Row(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .padding(8.dp), // –û—Ç—Å—Ç—É–ø—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
                                horizontalArrangement = Arrangement.SpaceBetween,
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Text(text = folder)

                                Row {
                                    IconButton(onClick = {
                                        folderToRename = folder
                                        newFolderName = folder
                                        showRenameDialog = true
                                    }) {
                                        Icon(Icons.Default.Edit, contentDescription = "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–ø–∫—É")
                                    }
                                    IconButton(onClick = {
                                        folderToDelete = folder
                                        showDeleteDialog = true
                                    }) {
                                        Icon(Icons.Default.Delete, contentDescription = "–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É")
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }



        // ‚úÖ –î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏
        if (showNewFolderDialog) {
            AlertDialog(
                onDismissRequest = { showNewFolderDialog = false },
                title = { Text("–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É") },
                text = {
                    OutlinedTextField(
                        value = newFolderName,
                        onValueChange = { newFolderName = it },
                        label = { Text("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏") }
                    )
                },
                confirmButton = {
                    Button(onClick = {
                        viewModel.createFolder(newFolderName)
                        showNewFolderDialog = false
                    }) {
                        Text("–°–æ–∑–¥–∞—Ç—å")
                    }
                },
                dismissButton = {
                    Button(onClick = { showNewFolderDialog = false }) {
                        Text("–û—Ç–º–µ–Ω–∞")
                    }
                }
            )
        }


        // ‚úÖ –î–∏–∞–ª–æ–≥ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
        if (showRenameDialog) {
            AlertDialog(
                onDismissRequest = { showRenameDialog = false },
                title = { Text("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø–∞–ø–∫—É") },
                text = {
                    OutlinedTextField(
                        value = newFolderName,
                        onValueChange = { newFolderName = it },
                        label = { Text("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ") }
                    )
                },
                confirmButton = {
                    Button(
                        onClick = {
                            folderToRename?.let { oldName ->
                                viewModel.renameFolder(
                                    oldName,
                                    newFolderName
                                )
                            }
                            showRenameDialog = false
                        }
                    ) {
                        Text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
                    }
                },
                dismissButton = {
                    Button(onClick = { showRenameDialog = false }) {
                        Text("–û—Ç–º–µ–Ω–∞")
                    }
                }
            )
        }

        // ‚úÖ –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏
        if (showDeleteDialog) {
            AlertDialog(
                onDismissRequest = { showDeleteDialog = false },
                title = { Text("–£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É?") },
                text = { Text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø–∞–ø–∫—É –∏ –≤—Å–µ –µ—ë —Ñ–æ—Ç–æ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.") },
                confirmButton = {
                    Button(
                        onClick = {
                            folderToDelete?.let { folder ->
                                viewModel.deleteFolder(folder, onSuccess = {
                                    showDeleteDialog = false
                                    navController.popBackStack("folders", inclusive = false) // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                                }, onFailure = {
                                    showDeleteDialog = false
                                })
                            }
                        }
                    ) {
                        Text("–£–¥–∞–ª–∏—Ç—å")
                    }
                },
                dismissButton = {
                    Button(onClick = { showDeleteDialog = false }) {
                        Text("–û—Ç–º–µ–Ω–∞")
                    }
                }
            )
        }


    }
}

@Preview(showBackground = true)
@Composable
fun PreviewFolderScreen() {
    FolderScreen(navController = rememberNavController())
}
