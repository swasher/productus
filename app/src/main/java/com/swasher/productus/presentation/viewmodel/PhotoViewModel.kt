/*
–£–ø—Ä–∞–≤–ª—è–µ—Ç UI-–ª–æ–≥–∏–∫–æ–π. –ó–Ω–∞–µ—Ç –ø—Ä–æ UI, –Ω–æ –Ω–µ –∑–Ω–∞–µ—Ç, –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω–∞ Firestore –∏–ª–∏ Cloudinary.

–ß—Ç–æ –¥–µ–ª–∞–µ—Ç PhotoViewModel:
‚úÖ –£–ø—Ä–∞–≤–ª—è–µ—Ç UI-–¥–∞–Ω–Ω—ã–º–∏
‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ)
‚úÖ –í—ã–∑—ã–≤–∞–µ—Ç PhotoRepository, –Ω–æ –Ω–µ –∑–Ω–∞–µ—Ç, –∫–∞–∫ —Ç–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
*/

package com.swasher.productus.presentation.viewmodel

import android.util.Log
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.swasher.productus.data.model.Photo
import com.swasher.productus.data.repository.PhotoRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.launch
import kotlinx.coroutines.flow.combine
import kotlinx.coroutines.flow.stateIn
import kotlinx.coroutines.flow.SharingStarted

import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.viewmodel.initializer
import androidx.lifecycle.viewmodel.viewModelFactory
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore


class PhotoViewModel : ViewModel() {
    private val repository = PhotoRepository()
    // private val firestore = FirebaseFirestore.getInstance()
    private val userId: String?get() = FirebaseAuth.getInstance().currentUser?.uid
    private val userFolder = "User-$userId"

    // –¥–ª—è –æ—Ç–±–æ—Ä–∞ —Ñ–æ—Ç–æ –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏
    private val _photos = MutableStateFlow<List<Photo>>(emptyList())
    val photos: StateFlow<List<Photo>> = _photos.asStateFlow()

    // –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–≥–∞–º –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏
    private val _filterTag = MutableStateFlow<String?>(null)
    val filterTag = _filterTag.asStateFlow()

    // –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –¥–ª—è —á–µ–≥–æ, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    private val _filterFolder = MutableStateFlow<String?>(null)
    val filterFolder = _filterFolder.asStateFlow()

    // –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏
    private val _folders = MutableStateFlow<List<String>>(emptyList())
    val folders: StateFlow<List<String>> = _folders.asStateFlow()

    // –ø–æ–∏—Å–∫ –ø–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞—á–∞–Ω–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Firebase
    private val _allPhotos = MutableStateFlow<List<Photo>>(emptyList()) // ‚úÖ –í—Å–µ —Ñ–æ—Ç–æ –≤ –ø–∞–º—è—Ç–∏
    val allPhotos: StateFlow<List<Photo>> = _allPhotos.asStateFlow()

    // –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    private val _searchResults = MutableStateFlow<List<Photo>>(emptyList())
    val searchResults: StateFlow<List<Photo>> = _searchResults.asStateFlow()

    // –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–ø–ª–æ–∞–¥–∞
    private val _isUploading = MutableStateFlow(false)
    val isUploading: StateFlow<Boolean> = _isUploading.asStateFlow()

    init {
        //loadAllPhotos() // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        observeFolders()
    }


    // TODO startObservingPhotos –∏ observePhotos –Ω–∞–≤–µ—Ä–Ω–æ–µ –Ω–∞–¥–æ –æ–±—ä–µ–¥–µ–Ω–∏—Ç—å(—Å–ø—Ä–æ—Å–∏—Ç—å –ú–û–°–ö)

    private fun observeFolders() {
        repository.observeFolders(
            onUpdate = { _folders.value = it },
            onFailure = { it.printStackTrace() }
        )
    }

    fun observePhotos(folder: String) {
        repository.observePhotos(
            folder = folder,
            onUpdate = { _photos.value = it },
            onFailure = { it.printStackTrace() }
        )
    }
    // fun startObservingPhotos(folder: String) {
    //     observePhotos(folder)
    // }

    companion object {
        val Factory: ViewModelProvider.Factory = viewModelFactory {
            initializer {
                PhotoViewModel()
            }
        }
    }

    // possible deprecated
    // –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –≤ –±—É–¥—É—â–µ–º, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –±—É–¥–µ—Ç –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ
    private fun loadAllPhotos() {
        repository.getAllPhotos(
            onSuccess = { _allPhotos.value = it },
            onFailure = { it.printStackTrace() }
        )
    }

    fun loadPhotos(folder: String) {
        Log.d("PhotoViewModel", "–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –ø–∞–ø–∫–∏: $folder") // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤
        repository.getPhotos(
            folder = folder,
            onSuccess = {
                _photos.value = it
                Log.d("PhotoViewModel", "–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ: ${it.size}")
            },
            onFailure = {
                it.printStackTrace()
                Log.e("PhotoViewModel", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: ${it.message}")
            }
        )
    }

    fun loadFolders() {
        repository.getFolders(
            onSuccess = { _folders.value = it },
            onFailure = { it.printStackTrace() }
        )
    }

    fun createFolder(folderName: String) {
        repository.createFolder(
            folderName = folderName,
            onSuccess = { loadFolders() }, // ‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
            onFailure = { it.printStackTrace() }
        )
    }


    fun renameFolder(oldName: String, newName: String) {
        repository.renameFolder(
            oldName = oldName,
            newName = newName,
            onSuccess = { loadFolders() }, // ‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
            onFailure = { it.printStackTrace() }
        )
    }


    fun deleteFolder(folder: String, onSuccess: () -> Unit, onFailure: (Exception) -> Unit) {
        repository.deleteFolder(
            folder = folder,
            onSuccess = {
                loadFolders() // ‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
                onSuccess()
            },
            onFailure = { onFailure(it) }
        )
    }



    fun deletePhoto(folder: String, photoId: String, imageUrl: String) {
        repository.deletePhoto(
            folder = folder,
            photoId = photoId,
            imageUrl = imageUrl,
            onSuccess = { loadPhotos(folder) }, // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ
            onFailure = { it.printStackTrace() }
        )
    }


    // PREVIOUS VERIOSN
    // fun updatePhoto(folder: String, photoId: String, comment: String, tags: List<String>, name: String, country: String, store: String, price: Float) {
    //     val cleanedTags = tags.map { it.trim() }.filter { it.isNotBlank() } // ‚úÖ –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    //
    //     repository.updatePhoto(
    //         folder = folder, // üìå –ü–µ—Ä–µ–¥–∞—ë–º –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    //         photoId = photoId,
    //         comment = comment,
    //         tags = cleanedTags,
    //         name = name,
    //         country = country,
    //         store = store,
    //         price = price,
    //         onSuccess = { loadPhotos(folder) }, // üìå –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –∏–∑ –Ω—É–∂–Ω–æ–π –ø–∞–ø–∫–∏
    //         onFailure = { it.printStackTrace() }
    //     )
    // }


    fun updatePhoto(folder: String, photoId: String, comment: String, tags: List<String>, name: String, country: String, store: String, price: Float) {
        val cleanedTags = tags.map { it.trim() }.filter { it.isNotBlank() } // ‚úÖ –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

        repository.updatePhoto(
            folder = folder,
            photoId = photoId,
            comment = comment,
            tags = cleanedTags,
            name = name,
            country = country,
            store = store,
            price = price,
            onSuccess = {
                // üî• –í–º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                _photos.value = _photos.value.map { photo ->
                    if (photo.id == photoId) {
                        photo.copy(
                            comment = comment,
                            tags = cleanedTags,
                            name = name,
                            country = country,
                            store = store,
                            price = price
                        )
                    } else photo
                }
            },
            onFailure = { it.printStackTrace() }
        )
    }


    // —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ "–°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫–µ"
    val filteredPhotos = combine(photos, filterTag, filterFolder) { photos, tag, folder ->
        photos.filter {
            (tag == null || it.tags.contains(tag)) &&
                    (folder == null || it.folder == folder)
        }
    }.stateIn(viewModelScope, SharingStarted.Lazily, emptyList())

    fun setFilterTag(tag: String?) {
        _filterTag.value = tag
    }

    fun setFilterFolder(folder: String?) {
        _filterFolder.value = folder
    }

    fun clearSearchResults() {
        _searchResults.value = emptyList()
    }

    // –í–∞—Ä–∏–∞–Ω—Ç –ø–æ–∏—Å–∫–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º Flow (—á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å –∫ Firestore)
    /*
    suspend fun searchPhotos(query: String): Flow<List<Photo>> = flow {
        if (query.isBlank()) {
            emit(emptyList<Photo>()) // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è, –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            return@flow
        }

        firestore.collectionGroup("Photos") // üìå –ò—â–µ–º –≤–æ –≤—Å–µ—Ö –ø–∞–ø–∫–∞—Ö
            .orderBy("name") // üîç –£–ª—É—á—à–∞–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É (–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω–¥–µ–∫—Å–∞)
            .startAt(query)
            .endAt(query + "\uf8ff")
            .get()
            .addOnSuccessListener { snapshot ->
                val photos = snapshot.documents.mapNotNull { it.toObject(Photo::class.java) }
                emit(photos) // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
            }
            .addOnFailureListener { emit(emptyList<Photo>()) }
    }.debounce(300) // ‚è≥ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É 300ms –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    */


    // –í–∞—Ä–∏–∞–Ω—Ç –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å –∫ Firestore
    /*
    // TODO –¥–æ–±–∞–≤–∏—Ç—å .debounce(300)
    suspend fun searchPhotos(query: String) {
        if (query.isBlank()) {
            _searchResults.value = emptyList<Photo>() // ‚úÖ –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è, –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            return
        }

        Log.d("PhotoViewModel", "–ü–æ–∏—Å–∫: $query")

        try {
            val snapshot: QuerySnapshot = withContext(Dispatchers.IO) {
                firestore.collectionGroup("Photos")
                    .orderBy("name")
                    .startAt(query)
                    .endAt(query + "\uf8ff")
                    .get()
                    .await()
            }
            _searchResults.value = snapshot.documents.mapNotNull { it.toObject(Photo::class.java) }
            Log.d("PhotoViewModel", "–ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ: ${_searchResults.value.size}")
        } catch (e: Exception) {
            _searchResults.value = emptyList()
            Log.e("PhotoViewModel", "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${e.message}")
        }
    }
    */

    // –í–∞—Ä–∏–∞–Ω—Ç –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é Firestore
    fun searchPhotos(query: String) {
        if (query.isBlank()) {
            _searchResults.value = emptyList() // ‚úÖ –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∏—Å–∫
            return
        }

        val lowerQuery = query.lowercase()

        _searchResults.value = _allPhotos.value.filter { photo ->
            photo.name.lowercase().contains(lowerQuery) ||
            photo.comment.lowercase().contains(lowerQuery) ||
            photo.tags.any { it.lowercase().contains(lowerQuery) }
        }
    }


    fun uploadPhoto(photoPath: String, folder: String) {
        _isUploading.value = true // ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏

        repository.uploadPhotoToCloudinary(photoPath, folder,
            onSuccess = { imageUrl ->
                repository.saveDataToFirebase(
                    folder,
                    imageUrl,
                    onSuccess = { Log.d("CameraActivity", "‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Firebase!")},
                    onFailure = {
                        it.printStackTrace()
                        Log.e("CameraActivity", "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –≤ Firebase: ${it.message}")
                    }
                ) // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
                _isUploading.value = false // ‚úÖ –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            },
            onFailure = {
                _isUploading.value = false
                it.printStackTrace()
            }
        )
    }




}
