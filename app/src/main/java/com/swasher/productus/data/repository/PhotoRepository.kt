package com.swasher.productus.data.repository

import android.os.Handler
import android.os.Looper
import android.util.Log
import com.cloudinary.android.MediaManager
import com.google.firebase.firestore.FirebaseFirestore
import com.swasher.productus.data.model.Photo
import java.util.UUID

class PhotoRepository {
    private val firestore = FirebaseFirestore.getInstance()
    private val photosCollection = firestore.collection("photos")

    // üìå –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ (–∫–æ–ª–ª–µ–∫—Ü–∏–π)
    fun getFolders(onSuccess: (List<String>) -> Unit, onFailure: (Exception) -> Unit) {
        firestore.collection("Folders")
            .get()
            .addOnSuccessListener { snapshot ->
                val folders = snapshot.documents.map { it.id } // –ö–∞–∂–¥–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è - —ç—Ç–æ –ø–∞–ø–∫–∞
                onSuccess(folders)
            }
            .addOnFailureListener { onFailure(it) }
    }


    // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–∏
    fun getPhotos(folder: String, onSuccess: (List<Photo>) -> Unit, onFailure: (Exception) -> Unit) {
        Log.d("PhotoRepository", "Fetching photos for folder: $folder")
        firestore.collection("Folders").document(folder).collection("Photos")
            .orderBy("createdAt")
            .get()
            .addOnSuccessListener { snapshot ->
                Log.d("PhotoRepository", "–ü–æ–ª—É—á–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${snapshot.size()}")
                val photos = snapshot.documents.mapNotNull { it.toObject(Photo::class.java) }
                Log.d("PhotoRepository", "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ —Ñ–æ—Ç–æ: ${photos.size}")
                onSuccess(photos)
            }
            .addOnFailureListener {
                Log.e("PhotoRepository", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: ${it.message}")
                onFailure(it)
            }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é (–ø–∞–ø–∫—É)
    fun savePhoto(folder: String, imageUrl: String, onSuccess: () -> Unit, onFailure: (Exception) -> Unit) {
        val publicId = imageUrl.substringAfterLast("/") // üìå –ò–∑–≤–ª–µ–∫–∞–µ–º `vivzby7juh6ph5g4nywq.jpg`
            .substringBeforeLast(".") // üìå –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ `.jpg`

        val photo = Photo(
            id = publicId,
            imageUrl = imageUrl,
            folder = folder,
            comment = "",
            tags = emptyList(),
            createdAt = System.currentTimeMillis()
        )

        firestore.collection("Folders").document(folder).collection("Photos")
            .document(publicId)
            .set(photo)
            .addOnSuccessListener { onSuccess() }
            .addOnFailureListener { onFailure(it) }
    }



    fun observePhotos(folder: String, onUpdate: (List<Photo>) -> Unit, onFailure: (Exception) -> Unit) {
        firestore.collection("Folders").document(folder).collection("Photos")
            .orderBy("createdAt")
            .addSnapshotListener { snapshot, error ->
                if (error != null) {
                    onFailure(error)
                    return@addSnapshotListener
                }

                val photos = snapshot?.documents?.mapNotNull { it.toObject(Photo::class.java) } ?: emptyList()
                onUpdate(photos)
            }
    }




    fun deletePhotosFromCloudinary(photoUrls: List<String>, onComplete: () -> Unit) {
        if (photoUrls.isEmpty()) {
            onComplete() // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
            return
        }
        val publicIds = photoUrls.map { it.substringAfterLast("/") } // –ü–æ–ª—É—á–∞–µ–º public_id –∏–∑ URL
            .map { it.substringBeforeLast(".") } // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

        // –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è
        val deleteResults = mutableListOf<Boolean>()
        val totalRequests = publicIds.size

        // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        publicIds.forEach { publicId ->
            Thread {
                try {
                    val result = MediaManager.get().cloudinary.uploader().destroy(publicId, null)
                    synchronized(deleteResults) {
                        deleteResults.add(result != null && result.get("result") == "ok")
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –ª–∏ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
                        if (deleteResults.size == totalRequests) {
                            // –í—ã–ø–æ–ª–Ω—è–µ–º callback –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                            Handler(Looper.getMainLooper()).post {
                                onComplete()
                            }
                        }
                    }
                } catch (e: Exception) {
                    e.printStackTrace()
                    synchronized(deleteResults) {
                        deleteResults.add(false)
                        if (deleteResults.size == totalRequests) {
                            Handler(Looper.getMainLooper()).post {
                                onComplete()
                            }
                        }
                    }
                }
            }.start()
        }
    }


    fun deletePhoto(folder: String, photoId: String, imageUrl: String, onSuccess: () -> Unit, onFailure: (Exception) -> Unit) {
        firestore.collection("Folders").document(folder).collection("Photos")
            .document(photoId)
            .delete()
            .addOnSuccessListener {
                // ‚úÖ –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –∏–∑ Cloudinary
                val publicId = imageUrl.substringAfterLast("/").substringBeforeLast(".")

                Log.d("PhotoRepository", "Extracted publicId: $publicId from URL: $imageUrl")


                // if only for debug
                if (publicId.isEmpty()) {
                    Log.e("PhotoRepository", "Invalid publicId extracted from URL: $imageUrl")
                    onFailure(Exception("Invalid publicId"))
                }


                try {
                    val result = MediaManager.get().cloudinary.uploader().destroy(publicId, null)
                    // –ë–æ–ª–µ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–±–∞–≥–∞, –Ω–æ –º–æ–∂–Ω–æ –∏ —Ç–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç—å, –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
                    //                    Log.d("PhotoRepository", "–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ Cloudinary: $publicId, result: $result")
                    //                    onSuccess()

                    if (result == null || result["result"] != "ok") {
                        Log.e("PhotoRepository", "Cloudinary deletion failed: $result")
                        onFailure(Exception("Cloudinary deletion failed"))
                    } else {
                        Log.d("PhotoRepository", "–§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ Cloudinary: $publicId, result: $result")
                        onSuccess()
                    }

                } catch (e: Exception) {
                    Log.e("PhotoRepository", "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Cloudinary: ${e.message}")
                    onFailure(e)
                }
            }
            .addOnFailureListener { onFailure(it) }
    }


    fun updatePhoto(folder: String, photoId: String, comment: String, tags: List<String>, onSuccess: () -> Unit, onFailure: (Exception) -> Unit) {
        val updates = mapOf(
            "comment" to comment,
            "tags" to tags
        )

        firestore.collection("Folders").document(folder).collection("Photos")
            .document(photoId)
            .update(updates)
            .addOnSuccessListener { onSuccess() }
            .addOnFailureListener { onFailure(it) }
    }

}
