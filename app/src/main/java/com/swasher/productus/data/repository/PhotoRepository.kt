package com.swasher.productus.data.repository

import android.os.Handler
import android.os.Looper
import com.cloudinary.android.MediaManager
import com.google.firebase.firestore.FirebaseFirestore
import com.swasher.productus.data.model.Photo
import java.util.UUID

class PhotoRepository {
    private val firestore = FirebaseFirestore.getInstance()
    private val photosCollection = firestore.collection("photos")

    // üìå –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ (–∫–æ–ª–ª–µ–∫—Ü–∏–π)
    fun getFolders(onSuccess: (List<String>) -> Unit, onFailure: (Exception) -> Unit) {
        firestore.collection("Folders")
            .get()
            .addOnSuccessListener { snapshot ->
                val folders = snapshot.documents.map { it.id } // –ö–∞–∂–¥–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è - —ç—Ç–æ –ø–∞–ø–∫–∞
                onSuccess(folders)
            }
            .addOnFailureListener { onFailure(it) }
    }


    // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–∏
    fun getPhotos(folder: String, onSuccess: (List<Photo>) -> Unit, onFailure: (Exception) -> Unit) {
        firestore.collection("Folders").document(folder).collection("Photos")
            .orderBy("createdAt")
            .get()
            .addOnSuccessListener { snapshot ->
                val photos = snapshot.documents.mapNotNull { it.toObject(Photo::class.java) }
                onSuccess(photos)
            }
            .addOnFailureListener { onFailure(it) }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é (–ø–∞–ø–∫—É)
    fun savePhoto(folder: String, imageUrl: String, onSuccess: () -> Unit, onFailure: (Exception) -> Unit) {
        val publicId = imageUrl.substringAfterLast("/") // üìå –ò–∑–≤–ª–µ–∫–∞–µ–º `vivzby7juh6ph5g4nywq.jpg`
            .substringBeforeLast(".") // üìå –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ `.jpg`

        val photo = Photo(
            id = publicId,
            imageUrl = imageUrl,
            comment = "",
            tags = emptyList(),
            createdAt = System.currentTimeMillis()
        )

        firestore.collection("Folders").document(folder).collection("Photos")
            .document(publicId)
            .set(photo)
            .addOnSuccessListener { onSuccess() }
            .addOnFailureListener { onFailure(it) }
    }

    // ???????????? depreciated?
//    // –£–¥–∞–ª—è–µ–º –≤—Å—é –ø–∞–ø–∫—É —Å —Ñ–æ—Ç–æ
//    fun deleteFolder(folder: String, onSuccess: () -> Unit, onFailure: (Exception) -> Unit) {
//        val folderRef = firestore.collection("Folders").document(folder).collection("Photos")
//        folderRef.get().addOnSuccessListener { snapshot ->
//            val batch = firestore.batch()
//            snapshot.documents.forEach { batch.delete(it.reference) }
//            batch.commit().addOnSuccessListener {
//                // OLD folderRef.parent?.delete()?.addOnSuccessListener { onSuccess() }
//                firestore.collection("Folders").document(folder).delete()
//                    .addOnSuccessListener { onSuccess() }
//                    .addOnFailureListener { onFailure(it) }
//            }.addOnFailureListener { onFailure(it) }
//        }.addOnFailureListener { onFailure(it) }
//    }

    fun observePhotos(onUpdate: (List<Photo>) -> Unit, onFailure: (Exception) -> Unit) {
        photosCollection.orderBy("createdAt").addSnapshotListener { snapshot, error ->
            if (error != null) {
                onFailure(error)
                return@addSnapshotListener
            }

            val photos = snapshot?.documents?.mapNotNull { it.toObject(Photo::class.java) } ?: emptyList()
            onUpdate(photos)
        }
    }

//    private fun deletePhotosFromCloudinary(photoUrls: List<String>, onComplete: () -> Unit) {
//        if (photoUrls.isEmpty()) {
//            onComplete() // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
//            return
//        }
//
//        val publicIds = photoUrls.map { it.substringAfterLast("/") } // üìå –ü–æ–ª—É—á–∞–µ–º public_id –∏–∑ URL
//            .map { it.substringBeforeLast(".") } // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
//
//        val deleteRequests = publicIds.map { publicId ->
//            MediaManager.get().cloudinary.uploader().destroy(publicId, null)
//        }
//
//        // –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è
//        val deleteResults = mutableListOf<Boolean>()
//        val totalRequests = deleteRequests.size
//
//        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
//        deleteRequests.forEach { request ->
//            request.execute { result ->
//                // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
//                if (result != null && result.get("result") == "ok") {
//                    deleteResults.add(true)
//                } else {
//                    deleteResults.add(false)
//                }
//
//                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –ª–∏ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
//                if (deleteResults.size == totalRequests) {
//                    onComplete() // –ó–∞–≤–µ—Ä—à–∞–µ–º, –∫–æ–≥–¥–∞ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
//                }
//            }
//        }
//    }

    fun deletePhotosFromCloudinary(photoUrls: List<String>, onComplete: () -> Unit) {
        if (photoUrls.isEmpty()) {
            onComplete() // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
            return
        }
        val publicIds = photoUrls.map { it.substringAfterLast("/") } // –ü–æ–ª—É—á–∞–µ–º public_id –∏–∑ URL
            .map { it.substringBeforeLast(".") } // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

        // –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è
        val deleteResults = mutableListOf<Boolean>()
        val totalRequests = publicIds.size

        // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        publicIds.forEach { publicId ->
            Thread {
                try {
                    val result = MediaManager.get().cloudinary.uploader().destroy(publicId, null)
                    synchronized(deleteResults) {
                        deleteResults.add(result != null && result.get("result") == "ok")
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –ª–∏ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
                        if (deleteResults.size == totalRequests) {
                            // –í—ã–ø–æ–ª–Ω—è–µ–º callback –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                            Handler(Looper.getMainLooper()).post {
                                onComplete()
                            }
                        }
                    }
                } catch (e: Exception) {
                    e.printStackTrace()
                    synchronized(deleteResults) {
                        deleteResults.add(false)
                        if (deleteResults.size == totalRequests) {
                            Handler(Looper.getMainLooper()).post {
                                onComplete()
                            }
                        }
                    }
                }
            }.start()
        }
    }


    // OLD
    //    fun updatePhoto(photoId: String, comment: String, tags: List<String>, onSuccess: () -> Unit, onFailure: (Exception) -> Unit) {
    //        val updates = mapOf(
    //            "comment" to comment,
    //            "tags" to tags
    //        )
    //
    //        photosCollection.document(photoId)
    //            .update(updates)
    //            .addOnSuccessListener { onSuccess() }
    //            .addOnFailureListener { onFailure(it) }
    //    }
    fun updatePhoto(folder: String, photoId: String, comment: String, tags: List<String>, onSuccess: () -> Unit, onFailure: (Exception) -> Unit) {
        val updates = mapOf(
            "comment" to comment,
            "tags" to tags
        )

        FirebaseFirestore.getInstance().collection(folder) // üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º folder –∫–∞–∫ –∏–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            .document(photoId)
            .update(updates)
            .addOnSuccessListener { onSuccess() }
            .addOnFailureListener { onFailure(it) }
    }


}
